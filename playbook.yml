---
- hosts: all
  become: yes
  

  tasks:
    - name: Install packages
      dnf: "name={{ item }} state=present"
      with_items:
        - python3-pip
        - python3.6
        - postgresql
        - postgresql-server
        - postgresql-devel
        - git
        
    - name: if PostgreSQL initialized
      ansible.builtin.stat:
        path: "/var/lib/pgsql/data/pg_hba.conf"
      register: postgres_data

    - name: "Initialize PostgreSQL"
      shell: "postgresql-setup initdb"
      when: not postgres_data.stat.exists
      
    - name: Allow md5 connection for the all user
      postgresql_pg_hba:
        dest: "/var/lib/pgsql/data/pg_hba.conf"
        contype: host
        databases: all
        source: 127.0.0.1/32
        method: md5
        users: "all"
        create: true
      become: yes
      become_user: root
      
    - name: Allow md5 connection for the worker user 
      postgresql_pg_hba:
        dest: "/var/lib/pgsql/data/pg_hba.conf"
        contype: host
        databases: app
        source: all
        method: md5
        users: "worker"
        create: true
      become: yes
      become_user: root
       
     
    - name: "Start and enable services"
      service: "name={{ item }} state=started enabled=yes"
      with_items:
        - postgresql


    - name: clone a repository
      git:
        repo: https://github.com/mbaran0v/python-sample-app.git
        dest: /app
        clone: yes
        update: yes
        
       
    - name: Install specified python requirements offline from a local directory with downloaded packages
      pip:            
       requirements: /app/requirements.txt
       virtualenv: /app/.venv
       virtualenv_command: /usr/bin/python3.6 -m venv

    - name: Install specified postgres module
      pip:            
       name:
       - psycopg2-binary
  
  
    - name: Create test database PostgreSQL
      become: yes
      become_user: postgres
      vars:
        database: app
        username: worker
        password: worker
        password_for_default_postgres_user: lockon48
      block:
        - postgresql_user:
            name: postgres
            password: '{{ password_for_default_postgres_user }}'
        - postgresql_db:
            db: '{{ database }}'
            encoding: UTF-8
            state: present
        - postgresql_user:
            db: '{{ database }}'
            name: '{{ username }}'
            password: '{{ password }}'
            state: present
            expires: infinity
            priv: CREATE,CONNECT,TEMPORARY
        - postgresql_db:
            db: '{{ database }}'
            owner: '{{ username }}'
            encoding: UTF-8
            state: present
            
    - name: copy script
      copy:
        src: script.sh
        dest: /app/script.sh
        mode: '0755'


    - name: run script
      command: /app/script.sh
      async: true
      poll: 0

    - name: App is running? 
      wait_for:
        host: localhost
        port: 5000
        state: started
        
    - name: Send POST request
      uri:
        url: http://127.0.0.1:5000/api/user
        method: POST
        body_format: json
        body:
          username: user123
          email: user@example.com
          password_hash: example
        headers:
          Content-Type: application/json
      register: response

    - name: Display response
      debug:
        var: response        

    - name: get list users
      uri:
        url: http://127.0.0.1:5000/api/user
        method: GET
        return_content: yes
        status_code: 200
      register: response

    - name: Print response content
      debug:
        var: response.content
